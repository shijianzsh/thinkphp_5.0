<?php
/**
 * Created by PhpStorm.
 * User: 時間在說謊
 * Date: 2018/7/20
 * Time: 10:01
 */

namespace app\admin\controller;

use think\Controller;

class Regular extends Controller
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        if (request()->post()) {
            $post_arr = request()->post();
            if (preg_match(regular(1), $post_arr['text'])) {
                echo '匹配成功';
            } else {
                echo '匹配失败';
            }
        } else {
            return view();
        }
    }

    public function shiLi()
    {
        //*匹配前面0次,1次或多次前面原子
        echo preg_match('/Go*gle/', 'Ggle') ? '匹配成功<br />' : '匹配失败<br />';

        //?匹配0个或1个原子
        echo preg_match('/Go?gle/', 'Gogle') ? '匹配成功<br />' : '匹配失败<br />';

        //+匹配1个或多个原子
        echo preg_match('/Go+gle/', 'Google') ? '匹配成功<br />' : '匹配失败<br />';

        //.匹配G和g之间的任意一个字符
        echo preg_match('/G.g/', 'Gogle') ? '匹配成功<br />' : '匹配失败<br />';

        // | 匹配多个分支
        echo preg_match('/google|baidu/', 'baidu') ? '匹配成功<br />' : '匹配失败<br />';

        //^设置开头$设置结尾，精确匹配
        echo preg_match('/^google$/', 'google') ? '匹配成功<br />' : '匹配失败<br />';

        //{n} n表示前面原子出现的次数
        echo preg_match('/go{2}gle/', 'google') ? '匹配成功<br />' : '匹配失败<br />';

        //{n,} n表示前面原子至少要出现的次数,本例中,字符’o‘至少要出现2次
        echo preg_match('/go{2,}gle/', 'gooogle') ? '匹配成功<br />' : '匹配失败<br />';

        //{n,m} n表示前面原子至少要出现的次数,m表示最多出现次数,本例中,字符’o‘至少要出现2次,最多5次
        echo preg_match('/go{2,5}gle/', 'gooooogle') ? '匹配成功<br />' : '匹配失败<br />';

        // \b匹配单词边界,本例 ThinkPHP右边为边界不应再有内容
        echo preg_match('/PHP\b/', 'ThinkPHP 5.0') ? '匹配成功<br />' : '匹配失败<br />';

        // \B匹配除单词边界以外部分,本例 Think PHP右边不能有边界,左边必须要有边界
        echo preg_match('/\bPHP\B/', 'Think PHP5.0') ? '匹配成功<br />' : '匹配失败<br />';
    }
}